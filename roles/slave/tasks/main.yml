---

- name: Install mesos package
  apt: pkg={{ item }} state=present update_cache=yes cache_valid_time=3600
  with_items:
    - mesos

- name: MESOS - Stop service (if running)
  service: name=mesos-slave state=stopped

- name: MESOS - Clean work dir
  file: path={{ mesos_work_dir }} state=absent

- name: MESOS - Create work dir
  file: path={{ mesos_work_dir }} state=directory
  notify:
  - Restart mesos-slave

- name: MESOS - Configure zk file
  template: src=conf-mesos-zk.j2 dest=/etc/mesos/zk
  notify:
  - Restart mesos-slave

- name: MESOS - Configure work_dir file
  template: src=conf-mesos-work_dir.j2 dest=/etc/mesos-slave/work_dir
  notify:
  - Restart mesos-slave

- name: MESOS - Configure hostname file
  template: src=conf-mesos-hostname.j2 dest=/etc/mesos-slave/hostname
  notify:
  - Restart mesos-slave

- name: MESOS - Configure ip  file
  template: src=conf-mesos-ip.j2 dest=/etc/mesos-slave/ip
  notify:
  - Restart mesos-slave

- name: MESOS - Configure executor_registration_timeout file
  template: src=conf-mesos-executor_registration_timeout.j2 dest=/etc/mesos-slave/executor_registration_timeout
  notify:
  - Restart mesos-slave

- name: MESOS - Configure containerizers file
  template: src=conf-mesos-containerizers.j2 dest=/etc/mesos-slave/containerizers
  notify:
  - Restart mesos-slave

- name: MESOS - Configure executor_environment_variables file
  template: src=conf-mesos-executor_environment_variables.j2 dest=/etc/mesos-slave/executor_environment_variables
  notify:
  - Restart mesos-slave

- name: MESOS - Configure image_providers file
  template: src=conf-mesos-image_providers.j2 dest=/etc/mesos-slave/image_providers
  notify:
  - Restart mesos-slave

- name: MESOS - Configure isolation file
  template: src=conf-mesos-isolation.j2 dest=/etc/mesos-slave/isolation
  notify:
  - Restart mesos-slave

- name: MESOS - Download dvdcli
  get_url:
    url="{{ mesos_docker_volume_url }}"
    dest="{{ mesos_docker_volume_deb }}"

- name: MESOS - Install dvdcli
  apt:
    deb: "{{ mesos_docker_volume_deb }}"

- name: MESOS - Configure resources file
  template: src=conf-mesos-resources.j2 dest=/etc/mesos-slave/resources
  notify:
  - Restart mesos-slave

- name: MESOS - Configure nvidia_gpu_devices file
  template: src=conf-mesos-nvidia_gpu_devices.j2 dest=/etc/mesos-slave/nvidia_gpu_devices
  when: "'gpu' in group_names"
  notify:
  - Restart mesos-slave


- name: APT | Install Prerequisits 
  apt: name="{{ item }}" state=present update_cache=yes
  with_items:
    - apt-transport-https
    - ca-certificates
    - dmsetup
    - python-dev
    - python-pip

- name: Run dmsetup for Ubuntu 16.04
  command: dmsetup mknodes

- name: APT | Add Docker GPG Key
  apt_key:
    keyserver: hkp://p80.pool.sks-keyservers.net:80
    id: 58118E89F3A912897C070ADBF76221572C52609D

- name: APT | Configure Docker repository
  apt_repository:
    repo: "deb https://apt.dockerproject.org/repo ubuntu-xenial main"
    state: present
    mode: '644'
    update_cache: yes

- name: Ubuntu | Install the linux-image-extra kernal package
  apt: name="linux-image-extra-{{ ansible_kernel }}" state=present

- name: APT | Remove old repo lxc-docker
  apt: name=lxc-docker state=absent

- name: APT | Install Docker Engine
  apt:
    name: foo=1.12.5-0
    state: present
    update_cache: yes

- name: MESOS - Download nvidia-docker file
  get_url:
    url="{{ nvidia_docker_url }}"
    dest="{{ nvidia_docker_deb }}"
  when: "'gpu' in group_names"

- name: MESOS - Install nvidia-docker file
  apt:
    deb: "{{ nvidia_docker_deb }}"
  when: "'gpu' in group_names"

- name: MESOS - Enable mesos-slave service
  service: name=mesos-slave enabled=yes

- name: Make sure docker is running
  service:
    name: docker
    state: started

